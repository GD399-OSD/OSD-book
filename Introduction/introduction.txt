# Free as in Freedom.

“The master’s tools will never dismantle the master’s house” — Audrey Lorde

“… Capitalism must constantly ‘cool hunt’ and turn whatever is authentic and genuine into trends for consumption” — Micah White

How can you make open source more interesting to regular people, not just designers? Do people have any idea what open source is? Is it different than DIY?

Is open source elitist?

Open source is socialized means of production — which means you often have to help make your own shit. This isn't always what people want/can do? It is especially hard in regards to design: we are creators and problem solvers, but of often visual or physical things, not digital/code based things — especially not always of the actual tools of our design's productions (often working within a system — turn to printers for printing, typesetters/typographers for type, etc.)

Does anyone here use Quark? do we all teach students Adobe Creative Cloud? We don't (I hope) all specify the same typefaces as right to use, we don't all use the same brand of pencil or notebook, we don't all read the same design books, we do mostly all use the same computers and computer software though.

I'm having a hard time making this argument — we wouldn't expect a photo class to require that you use a Nikon f1, any camera might do. Why should all designers use Illustrator, Indesign and After Effects?

How is teaching design different than teaching a specific tool? are some of these open tools better when it comes to learning designing over learning a software to enable the designing?

Obviously, on one hand, we have a pragmatic situation: these are the tools of industry, pretty much every design studios my students are going to get jobs working at will be running Adobe Creative Suite on macs. Why would I not want to help students learn to use these things in my classes? But then I run into an issue — I don't know that the computer software we use to do these things will be the computer software we always use to do these things... how closely is the "designing" I'm teaching linked to the "softwareing"? Can I teach a student all the same time and motion concepts without ever having them use After Effects?

Are the tools the issue or is it just the file formats? Regardless of paper or pencil brand I can draw the way I've learned to draw... regardless of paint I buy I can paint what I wish to paint... regardless of circular saw and hammer or typeface I can make a reasonable bench or poster... Are the digital tools we use which have replaced our hand tools so different that they cannot be replaced? WTF am I saying?

Okay, alternatively though, if you think about designing as being a problem solver...

Designing at its heart should be a set of skills, processes, patterns, ways of thinking, that are agnostic to discipline or tool. Obviously one needs some manner of experiential knowledge with a tool or medium or format in order successfully realize their vision, but in an abstract way. One of my favorite things about modernists like Massimo Vignelli is that thikning that their designing could be applied to anything — you need an identity? I can use my design knowledge to do that. You need a teacup? I can design that too. You need a suit? I can design a suit… a chair? wallpaper? table? business card? check check check check. That is agnostic to the tools of production. Have we tied the tools of prodcution too closely to the designing????? sketching is designing is making final pieces now??? is that good? why is that bad? what does open source change about that? am I talking about the right thing anymore???

Why don't designers use open source? it's got bad UI? it's hard to find, install and actually use? The moderno-capitalist machine tells you that only Adobe CC can produce "professional" work? (or maybe something from AutoDesk) — other than Maxim, who makes C4D can you name another design software company???

This class has really changed student views. I've seen a lot of affect on projects outside of our class. I've heard a lot of conversations about other's works in other critiques that were influenced by our class. In the classroom for this class however, it always felt like we were "doing" very little — but maybe that was because of what we were doing. It wasn't about producing a lot of new work, it was about producing our work differently. So studnets were making things for other classes perhaps twice, or perhaps it was taking longer to make things for other classes because they were experimenting with multiple tools or unfamiliar tools.

Something interesting about us designers is that we all are using the same operating systems and softwares. In a field that values creativity and inventiveness, how can we be good at designing UI's, etc. when we all are looking at and fiddling with the same set of things as each other? One thing about a good interface is that goodness is often about familiarity. There is a certain amount of intuitiveness that you want to achieve, but in the end I like my Mac because I've been using macs for 30 years (a Mac SE from 1988 was my family's first comp I really remember using a lot). My colleagues that exclusively have used Windows or the few that are die hard linux afficianados feel the same for their chosen ecosystems — these things work as expected, those others don't, thus this is good and those are bad. I ran into this with my students too. I requested that they all try to use open source alternatives to Adobe products for the term. Most of them indulged me by at least installing inkscape, gimp, scribus, blender, etc. on their machines, but in the end claimed they were too hard to get to make the "finished" work they were trying to make... it was bad software and they couldn't make it work. I would argue that goodness and badness isn't really the issue — its learned behavior that's the issue. It's like knowing how to play a piano, and then being handed a guitar having never played one before — you can figure out the notes and maybe generally make something musical, but you wouldn't be able to say, play all the pieces of music you'd already learned for the piano with any skill... Anyway, the point is — by forcing yourself to try alternative tools you are actually making yourself a better designer. you see more things, you experience more, you might find that there are multiple ways of drawing vector paths (for example, Inkscape has 5 different kinds of vector path options when you select the pen tool compared to illustrator's one (Illustrator only draws good old beziers))

What's important about Free/Libre/Open source? to me its the ethics and the ideology. Even if you don't want to use the software or the fonts themselves (though you should, there are some magnificently robust F/LOS fonts [Fira, Noto, Gentium, …; and really, Inkscape is superior for pure vector drawing]) you can benefit from seeing designing from the point of view of an open source developer. Mainly, that while you might be the creative visionary, you owe it to the community that exists around your project to involve them in improving your work.

Adopting the idea that your creativity should result in outputs that others can benefit from and build upon is at odds with our contemporary capitalist culture.

You can do this in different ways.

There are tools that do things that no adobe thing does (nodebox) …

Anyway to illustrate my talk/essay with stuff from here: https://undraw.co/illustrations

»»»»»»»»»»»»»»»»»»»»»»»»»»»»»»

If you think of 20000 years ago you had to be a real individual — you had to find and make your own food, construct your own shelter, etc. Now you don't need that you can get away with only knowing how to be a musician... the collective brain we have is gigantic, other people can know how to do all these other things, and I can just play music...

A hand axe can be created by a single individual, any modern thing, like a computer mouse or most software, no one person can create anymore. Distribution of labor and collaboration allow for gigantic things like building cathedrals or traveling to other worlds.

Why would a smart person become a designer? Instead of being a arch-librarian governing eternal truth, the philosopher became a creative thinker that invented new concepts that we could use to advance our lives and society.

Pragmatic utopia: Imagine the world the way you wish it was, and then you actually sit down and try to build it that way.

Can I design the design that belongs to the time/space/world that I want to live in? if it doesn't exist already around you then you have to make the objects to help grow the future you want around those designs.

find yourself in places that you didn't intend to be. New, different, strange, tools from other places, these can allow for this in ways that "regular" or "main stream" tools cannot.

You probably heard that one before because it was never new and it never gets old and its a folk song... — LLewyn Davis

I have been teaching a class called Special Topics in Graphic Design: Open Source.

We keep a special class on the books at the Maryland Institute College of Art called "Special Topics in Graphic Design." Its there so if something catches a professors interest they can easily run one experimental section o fit without having to go through the rigamarole of adding a new class to the books...

Dave crossland at mica. google fonts. started a conversation about his background in open source and how that might have an effect on graphic designing. I asked him if he thought that using scribus and inkscape on linux led to different aesthetic or functional choices as a designer...

What is the purpose of design? How does it change with Open Source?

You often don't understand a problem until after the first time you implement a solution. If you want to get it right, be ready to start over at least once. How might one do this with their design practice? How about tools?

What are benefits of using open source tools? Why would a designer open source their visual materials?

Can code generate out design in a meaningful way?

What have I learned? what have we learned? what did we talk about?

Is there something aesthetically important we can learn from open source?

Any tool should be useful in the expected way, but a truly great tool lends itself to uses you never expected

do graphic designers make tools or just use tools

read and discuss stallman, raymond, and some other typical open source writings, also look at designers working in the realm of vernacular, DIY, etc.

Open source software powers much of the web and the modern tech world. Open source hardware powers all manner of maker spaces, workshops and offices. How do we use these mechanisms to the benefit of Graphic Design? This article's goal is to present the root ideals of the free/libre/open source software movements, and then apply them to the making of graphic design. Part of the paper covers the use of open source design tools, analyzing their pros and cons when compared to typical “industry-standard” making methods.

Questions being answered: What does “Open Source” mean in a Graphic Design context? How do visual designers help to iterate & improve these tools without the ability to code? How do non-mainstream tools change how we make graphic design? How do our design processes evolve & maintain transparency the same way open source communities & projects do? What do accessibility, transparency, and “freedom” bring aesthetically to visual design solutions?

Why not inkscape?
Why not scribus?
why not linux?

Nodebox is an interesting example of a toll that perhaps has one of the more intuitive interfaces I've used period. The normal rub against open source tools is taht the UI design is a nightmare. This is sort of a double strike against them from the point of view of a designer?

From a variety of places, I arrived at experimenting w some alternative tools to the adobe creative suite. I had a raspberry pi sitting unused leftover from a previous project and thought I might try actually using linux to do some design work of my own. Not to much later, David Crossland of Google Fonts visited our graphic design department at MICA and after finding out about his background in the libre graphics community ended up having a conversation with him about my ideas re: alternative, open tools… anyway, a class was born.

Since January I have been running a new course experiment at the Maryland Institute College of Art: Open Source Design.

I've had a lot of experience with open source communities on the web — I was a Drupal user fairly early on, have tried all sorts of CSS frameworks, and contemporary javascript plugins — but had never really tried to use linux to run anything other than a server, nor gave any of the desktop tools a real go. Personally and pedagogically I was interested in giving some things a go.

Stallman, GNU, cathedral and the bazaar, enzo mari's auto progettazione, DIYer counter culture 60s,70s, etc. stuff?

Are we limited by our tools?

Are we teaching students to use Adobe Creative Suite, or are we teaching them to be designers? How might alternative tools work better pedagogically in this goal?

The Adobe creative suite is a outcome of Contemporary capitalism and contemporary aesthetic modernism (becoming the new global styles instead, sort of neo-avant-modernism)

Stallman's main ideal is "Free and in Freedom." He didn't want to be limited by how or what he could do with the programming tools he was using. The mythology basically goes is that he gets frustrated with a printer, writes some new code for the print driver since he had the source code, but when the next version of the printer comes out it has the same problem but now xerox won't share the code so that he can fix it. This makes him so mad he walks out, quits his job at MIT, and writes the GNU manifesto … From then on focusing on free software (and literally living in his office at MIT still despite no longer officially working there [that's what having ideals gets you???]).

The gist of "free as in freedom" is multi-fold:
1. Free means that you have access to the under the hood raw materials and can tinker, fix, change, etc. at your will.
1. Free also means that your improvements, changes, whatever can and should also then be shareable/redistributable
1. It does not imply free as in no cost... Since the access to the source code is free, this is often the case, but it is not the intention.

Reading the _GNU manifesto_ and _the Cathedral and the Bazaar_ (as well as a handful of other new and old open-source/libre/free software related stuff) reminded me of an architecture book I frequently return to, _How Buildings Learn_ by Stewart Brand. Brand explains various ways that vernacular buildings work and learn from each other over time. Pulling from Eric Raymond's points in TCATB and some of Stallman's freedoms yields a number of similarities: releasing early and often, that the "design" is communal and open (no one owns the design?), bug fixes come from the community at large (see the housing addition diagrams?), and successes are moved forward while failures are removed over time, things are often modular, people solve their problems first which often end up being other people's problems...

Also from brand, the whole earth catalog.

The whole ecosystem of the whole earth catalog and the other sort of DIY, counter culture things from the 60s and 70s. Enzo Mari's Autoprogettazione, How to Build your own Living Structures, Nomadic Furniture, etc.

Open source as utopia?

What's humourous about all of this is that Design was historically open source... Life/Humanity has always evolved and grown based on slowly and building on whatever came before without worry of credit or cost or whatever else... That we need something like open source now is slightly amusing — Wanting to carefully protect our intellectual or creative "properties" is a fairly new ideal. Perhaps its connected to the fairly modern idea of artist/designer as unique, special, individual creator/solver of problems?? Capitalism of course needs to be able to make money off these things... so that is part of the rub too. But, "Open Source" still works in capitalism (see RedHat, or Acquia as examples — selling support and other services, etc. built on top of an otherwise free tool (Redhat mainly sells support for its linux distributions, Acquia sells support and specialized hosting for large Drupal websites)).

Open Design is not about community sourced design decisions, there can still be a single originator of the design, someone with singular vision, etc. but it does imply that there is transparency. (look at Garth's thoughts for reference on this?)

How does a designer fit into F/LOS?

F/LOS — Free, Libre, Open Source — Free as in Freedom...

The Four Freedoms:
https://www.gnu.org/philosophy/free-sw.html

The four essential freedoms
A program is free software if the program's users have the four essential freedoms:

The freedom to run the program as you wish, for any purpose (freedom 0).
The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this.
The freedom to redistribute copies so you can help others (freedom 2).
The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this.
A program is free software if it gives users adequately all of these freedoms. Otherwise, it is nonfree. While we can distinguish various nonfree distribution schemes in terms of how far they fall short of being free, we consider them all equally unethical.

In any given scenario, these freedoms must apply to whatever code we plan to make use of, or lead others to make use of. For instance, consider a program A which automatically launches a program B to handle some cases. If we plan to distribute A as it stands, that implies users will need B, so we need to judge whether both A and B are free. However, if we plan to modify A so that it doesn't use B, only A needs to be free; B is not pertinent to that plan.

“Free software” does not mean “noncommercial”. A free program must be available for commercial use, commercial development, and commercial distribution. Commercial development of free software is no longer unusual; such free commercial software is very important. You may have paid money to get copies of free software, or you may have obtained copies at no charge. But regardless of how you got your copies, you always have the freedom to copy and change the software, even to sell copies.

The Libre Designer.

GNU's origins are in ethical utopia. Users are the same as neighbors, fellow citizens. We must apply our do unto others beliefs to the access and reuse of and extension of the tools we make, not just our person to person interactions.

>>> start GNU references

The GNU manifesto was originally written by Richard Stallman in 1985.

The GNU project is part of the Free Software movement a campaing for freedom for users of software — Do not confuse Free Software with Open Source. Open Source was a term coined in 1998 by people who disagree with the Free Software Movement's ethical values. It promotes an amoral approach to the same field.

"I consider that the Golden Rule requires that if I like a program I must share it with other people who like it." — stallman in GNU manifesto

The fundamental act of friendship among programmers is the sharing of programs. The purchaser of software must choose between friendship and obeying the law. GNU serves as an example to inspire and a banner to rally others to join us in sharing.

Once GNU is written, everyone will be able to obtain good system software free, just like air.

wasteful duplication of system programming effort will be avoided.

a user that needs to make changes to their system will always be free to make them.

schools will be able to provide a much more educational environment by encouraging all students to study and improve the sytem code.

Copying all or parts of a program is as natural to a programmer as breathing, and as productive. It ought to be as free.
[does this sentence work if you replace program with design and programmer with designer??? — copying all or part of a design is as natural to a designer as breathing, and as productive. It ought to be as free.]

distinguish between support in the form of real programming work and mere handholding.
[the handholding is often missing in my personal experience]

if anything desrves a reward it is social contribution. Creativity can be a social contribution, but only in so far as society is free to use the results.

There is nothing wrong with wanting to be paid for work or seeking to maximize one's income as long as one does not use means that are desctructive. The means customary in the field of software today are based on destruction. Restrictions reduce the amount and the ways that a program can be used. The reason a good citizen does not use such destructive means to become wealthier is that, if everyone did so, we would all become poorer from the mutual desctructiveness — this is Kantian ethics, or the Golden Rule. The desire to be rewarded for one's creativity does not justify depriving the world in general of all or part of that creativity.

Control over the use of one's ideas really constitutes control over other epopel's lives; and it is usually used to make their lives more difficult.

The intention was that nobody have to pay for permission to use gnu

Distuinguish carefully between free in the sense of freedom and free in the sense of price. Free software is software users have the freedom to change and distribute.

>>> end GNU references

## Open Source Design Manifesto
by Garth Braithwaite

I will:
- find opportunities to design in the open
- share my design experiences; both the good and the bad
- find time for meaningful projects
- openly participate in design discussions
- work with other designers by choice
- improve my toolbox

## Open Source Design Is Now Design Open

To work on open source design means to publish creative work with an open license, giving the community a chance to reuse and rework your content in ways you may not have considered. It is also the act of contributing design work to existing open source projects. Both executions of open source design imply that the work is open to contributions and collaboration from outside designers.

Although open sourcing is great, not every design can be published under an open license. However, almost every project can be designed openly

As an added benefit to designing in the open, it is a short leap to open source design.

encourage all designers to become familiar with open source and make contributions to projects they care about.

This is not merely a nice idea, it is a clarion call to shed our insecurities, pride, and paralyzing perfectionism; to dedicate effort to helping worthy causes; and to raise the quality of design and design education on the web. A call to design open. — How do we improve this? How do we carry on the discussion?

## On Being a Unicorn

if you use F/LOS graphics software, standards and methods in your art or design practice, chances are good you have something interesting to talk to developers about. What you have to talk to them about is the way you use their software.

## Designing Open Source

I profit from using these technologies but I don’t know where to start with fixing any of their bugs. It's really frustrating.

This is a real issue for designers — we don't really know how to jump in, its intimidating, its obtuse, its not designerly? We're good at solving problems, we're good at seeing places for improvement, but we don't know how to write computer programming... We might not even know how to use Github or IRC or any of that junk... Too many barriers?

## This is the first day of the rest of my Life

Anything awesome has a gestation period. We just happen to love believing in spontaneous creation.

Applying F/LOSS principles to art and design might help us improve visual literacy, just as F/LOSS improves computer literacy. Applying F/LOSS principles to art and design might help us better understand the knowledge present in the creative process.

Scientists have built an economy where giving things away will increase their reputation

Even if the production methods of art have changed radically, the art market is still built on scarcity. Galleries will produce a limited number of copies of a video or photograph even if this medium potentially allows for unlimited copying and redistribution.

allowing someone else to find something in my work that I had never seen before can be beautiful and fulfilling. Yet, having someone reinterpret my artwork is not the same as someone coming up with a clever new use for a sorting algorithm.

the experience opens up new possibilities

F/LOSS encourages a mindset of bringing together disparate sources to make something new. This is why artists could potentially feel at home. There’s never a clean slate when you make a work of art or design. We are informed by our personal history, we are informed by all the other works we know.

Arguments against open design include that the process itself isn't clear, there aren't easy objective measurements of success (like a function works or it doesn't, a design is sort of subjective in this regard...)

Is the accessiblity of a tool at issue? is the accessibility a problem?

does just showing content/process/files/etc. count as open design?

open source = recursive?

OSD represents and emerging form of infrastructure that, at its heart, enbale non-hierarchical community sourced collaboration?

OSD is rooted in vernacular techniques. Sharing, iterating, copying whatever works best was what allowed communities to develop effective tools, clothing, shelter, objects, etc. A similar set of practices, more or less everywhere, allowed for forms to slowly iterate, progress, improve, disperse, but still to generate local flavor and specialization. Aesthetics, materials, decoration, forms are able to grow and evolve based on specific locations, but the general idea of iterative, open, designs was the way pretty much all cultures "designed" in the past. Succesful techniques were discovered to address local environmental conditions in an economic, reliable, easily duplicable manner.

Interset in this verancular approach began to surface within communities of computer scientists (this was also how scientific knowledge often is shared and grows) … this became (and is called variously) F/LOS: Free, Libre, Open Source...............

Equal parts pragamtism and utopia...

Values opennes, innovation, viability over profit.

Premised on the practices of sharing and increasing knowledge

Focus is not on the development of commodity, but on addressing the needs of community members through continuous user-sourced feedback and iteration.

Firefox Photon Design system? Solve a problem that others won't because some design decisions/bug finding comes from the community. (firefox best at screen reader friendly stuff, etc.)

As designers we can integarate open principles into our practices simply by being more transparent and sharing more... sharing assets, data, visual components, processes... By making generosity a key component of practice, designers can build a rich ecosystem of collaboration and inspiration.

designers can choose to use open source tools like Scribus or Fontforge. Free to modify their tools, open source designers have the power to change the aesthetic mode of production. This is particularly important because, as Fredric Jameson writes in _Postmodernisn, or The Cultural Logic of Late Capitalism_, because, “[a]esthetic production has become integrated into commodity production.” By using open source tools, designers can reclaim autonomy and authorship. [potential connection with Dunne/Raby, Mari, and the modernsim is bad conversation our class had]

Still, the boundaries that define open source design are difficult to articulate. For some designers, the OSD approach may entail the use of open source programs such as Sketch or Scribus. For others, it may mean designing a custom GitHub page for a worthy piece of open source software. Still for others it may mean sharing resources, process, and knowledge. However, most examples of open source design, such as Mozilla’s Photon Design, remain directly connected to the world of open source software. While the infrastructure of open source software has been intentionally developed,open source design is a practice still in its infancy, and lacks an effective platform to leverage the power of the community.

Participation in the open source community can cause radical shifts in design thinking, forcing dialogue into practice and problematizing tools often taken for granted. In the end, this may be the most significant advantage of open source design. As Enzo Mari writes in Autoprogettazione, building your own tools is the "best way to avoid being designed yourself." If everyone is given the opportunity to shape these tools, perhaps it is possible to design in a way which is responsive to the needs of the many, filling vital roles through user engagement. This not only guarantees greater inclusivity and accessibility, but represents a fundamental shift away from the capitalist mindset.

Am i really this much of a communist? In my thinking about sustainability, I've been moving towards the idea that my tools are incorrect. Adobe's creative suite is a creation of a modernist/capitalist system that is creating the sustainability issues. If this is the case, only another set of tools should be supported. Is that where the OS stuff comes in? That's where it started for me — fonts — open fonts seemed more sustainable and egalitarian. From there I've moved towards more intrinsically open tools. I've been trying to make the way I work more transparent as well.

>>> TCATB

Every good piece of software starts by scrathcing a developer's personal itch. How can this be a design system instead????

Good Programmers know what to write. Great programmers know what to rewrite and reuse. How might we reuse design patterns? design solutions? visual metaphors?

Or, to put it another way, you often don't really understand the problem until after the first time you implement a solution. The second time, maybe you know enough to do it right. So if you want to get it right, be ready to start over at least once. How to do this with design generally? Is this just the regular creative process? is that why release early and often works? What am I working on that I can redo better now? what would be advantaged from a complete restart?

If you are a designer and a lot of the users of your tools/designs are also designers, what benefits do you get by talking to the users more often?

How to treat users as co-designers to find the least hassle route to design improvement and effective problem/gap identification?

Whats the equivalent in a visual system for "release early and release often?"

Can code generate out a design in meaningful ways???

We generally work in design in the cathedral model: toiling away endlessly in the background for the one perfect release. More and faster output = better in open source programming, why not in open designing? less≠more in this context!

Given enough eyeballs all bugs are shallow: what's the design version of this statement in my work (in academia?)

the person who understands a problem is not necessarily or even usually the person that finds the problem first.

One special feature of the Linux situation that clearly helps along the Delphi effect is the fact that the contributors for any given project are self-selected. An early respondent pointed out that contributions are received not from a random sample, but from people who are interested enough to use the software, learn about how it works, attempt to find solutions to problems they encounter, and actually produce an apparently reasonable fix. Anyone who passes all these filters is highly likely to have something useful to contribute. — TCATB

One effect of a ``release early and often'' policy is to minimize such duplication by propagating fed-back fixes quickly — TCATB

11. The next best thing to having good ideas is recognizing good ideas from your users. Sometimes the latter is better.

12. Often, the most striking and innovative solutions come from realizing that your concept of the problem was wrong.

When you hit a wall in development—when you find yourself hard put to think past the next patch—it's often time to ask not whether you've got the right answer, but whether you're asking the right question. Perhaps the problem needs to be reframed.

13. ``Perfection (in design) is achieved not when there is nothing more to add, but rather when there is nothing more to take away.'' — Can a more open systems help graphic designers with this too???

I think you can't really aim or plan for a result like this. You have to get pulled into it by design ideas so powerful that afterward the results just seem inevitable, natural, even foreordained. The only way to try for ideas like that is by having lots of ideas—or by having the engineering judgment to take other peoples' good ideas beyond where the originators thought they could go.

Neither of us was original in the romantic way people think is genius...

14. Any tool should be useful in the expected way, but a truly great tool lends itself to uses you never expected. — for sure applicable, but what is a tool? do graphic designers make tools or just use tools?

It's fairly clear that one cannot code from the ground up in bazaar style. One can test, debug and improve in bazaar style, but it would be very hard to originate a project in bazaar mode. Linus didn't try it. I didn't either. Your nascent developer community needs to have something runnable and testable to play with.

When you start community-building, what you need to be able to present is a plausible promise. Your program doesn't have to work particularly well. It can be crude, buggy, incomplete, and poorly documented. What it must not fail to do is (a) run, and (b) convince potential co-developers that it can be evolved into something really neat in the foreseeable future.

I think it is not critical that the coordinator be able to originate designs of exceptional brilliance, but it is absolutely critical that the coordinator be able to recognize good design ideas from others.

But the problem with being clever and original in software design is that it gets to be a habit—you start reflexively making things cute and complicated when you should be keeping them robust and simple. I have had projects crash on me because I made this mistake, but I managed to avoid this with fetchmail.

I restrained my tendency to be clever

A bazaar project coordinator or leader must have good people and communications skills.

The Social Context of Open-Source Software:

18. To solve an interesting problem, start by finding a problem that is interesting to you.

in shops where developers are not territorial about their code, and encourage other people to look for bugs and potential improvements in it, improvement happens dramatically faster than elsewhere. This seems to be the important part of openness, it doesn't even have to be super broad — just sharing and not being ego-driven is what's important?

from TCATB: while coding remains an essentially solitary activity, the really great hacks come from harnessing the attention and brainpower of entire communities. The developer who uses only his or her own brain in a closed project is going to fall behind the developer who knows how to create an open, evolutionary context in which feedback exploring the design space, code contributions, bug-spotting, and other improvements come from from hundreds (perhaps thousands) of people. Brian eno says basically this same thing in his conversation with Bjarke... reference both???

adaptive systems in biology and economics also irresistably suggest themselves

like a free market or an ecology, a collection of selfish agents attempting to maximize utility which in the process produces a self-correcting spontaneous order more elaborate and efficient than any amount of central planning could have achieved

start from individual vision and brilliance, then amplify it through the effective construction of voluntary communities of interest.

>>> end TCATB

±±±±

A key issue in understanding — online in documents I found, with people I talked too, and in my students in the classroom — what that open design meant co-designing. I think this is not true. A design, to be good, needs strong initial vision and planning and theorizing. So, it would probably still start with an individual need or vision and spark of creative brilliance, but be amplifyied through the ideals expoused by Stallman, Raymond, et. al.: Openess, transparency, etc.

±±±±

The success of the open-source community sharpens this question considerably, by providing hard evidence that it is often cheaper and more effective to recruit self-selected volunteers from the Internet than it is to manage buildings full of people who would rather be doing something else. Okay, so is this then also a way to run a design studio???

the moment there is open-source competition for a `boring' piece of software, customers are going to know that it was finally tackled by someone who chose that problem to solve because of a fascination with the problem itself—which, in software as in other kinds of creative work, is a far more effective motivator than money alone. Okay! so is this a good reason to use open source/free/libre tools?

Human beings generally take pleasure in a task when it falls in a sort of optimal-challenge zone; not so easy as to be boring, not too hard to achieve. A happy programmer is one who is neither underutilized nor weighed down with ill-formulated goals and stressful process friction. Enjoyment predicts efficiency. Again, how does this relate to designing? And isn't this Marxist in its view? is that bad? is that what draws me to all of this, its being at odds with capitalist impulses?

±±±±

## Autoprogettazione:





±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±

## References:

Still need dates, authors, etc. and to format according to CMOS.

- The GNU Manifesto: https://www.gnu.org/gnu/manifesto.en.html
- The Four Essential Freedoms: https://www.gnu.org/philosophy/free-sw.html
- Open Design Manifesto: http://opendesign.foundation/articles/the-open-source-design-manifesto/
- Open Source Design Is Now Design Open: https://medium.com/design-open/open-source-design-is-now-design-open-e7005d577f6b
- On being a Unicorn: the case for user-involvement in F/LOSS, libre graphics 1.2
- Designing Open Source: https://medium.com/words-about-design/designing-open-source-e3adc220cfa7
- This is the first day of the rest of my life, Eric Schrijver, libre graphics 1.1
- The Catehdral and the Bazaar, Eric Raymond, This is version 3.0, Copyright © 2000 Eric S. Raymond, http://www.catb.org/esr/writings/cathedral-bazaar/cathedral-bazaar/
- Brian Eno and Bjarke Ingels Instruments of Change, https://www.youtube.com/watch?v=aBG8t6jDWuA
- Brian Eno on Genius, and “Scenius”: http://www.synthtopia.com/content/2009/07/09/brian-eno-on-genius-and-scenius/
- Havoc Pennington, Free Software UI, April 2002, http://ometer.com/free-software-ui.html (accessed 2018-04-22)

— https://www.are.na/kristian-bjornard/free-libre-open-design

»»»»»»»»»

Open Source Design

Brief:
What do the tools and ethos from Free/Libre/Open Source (FLOS) communities bring to a visual designer's education and praxis?

500 Word Abstract:

Open source software powers much of the web and the modern tech world. Open source hardware powers all manner of maker spaces, workshops and offices. How do we use these mechanisms to the benefit of Graphic Design? This article's goal is to present the root ideals of the free/libre/open source software movements, and then apply them to the making of graphic design. Part of the paper covers the use of open source design tools, analyzing their pros and cons when compared to typical “industry-standard” making methods. This paper also presents how the research, discussions, interviews, experiments, and work/output of the course “Open Source Design” (running Jan-May 2018) changes the ways a designer envisions their practice and methods of making. The paper utilizes the author's own work and research, work and research from the FLOSS community, as well as content created by their students to support the arguments. The way one works with FLOSS tools and ideals creates different systems, processes, methodologies, and aesthetics. The works of the author and their students provide interesting visual and code-based examples to help answer and illustrate this. Questions being answered: What does “Open Source” mean in a Graphic Design context? How do visual designers help to iterate & improve these tools without the ability to code? How do non-mainstream tools change how we make graphic design? How do our design processes evolve & maintain transparency the same way open source communities & projects do? What do accessibility, transparency, and “freedom” bring aesthetically to visual design solutions?

Reviewer 1
Been waiting for this.
The proposal poses some interesting questions. Specifically, these broad and philosophical questions are located in paragraph 1. In paragraph 2, the proposal falls flat. I would recommend to the author, that s/he focus on addressing the questions raised in the first paragraph. If the paper simply becomes a write-up of the teaching experience, it will essentially retread many ideas and experiences that all faculty have already had in the classroom. The paper has the potential to be more provocative is it deals with the issues of "reuse," "accessibility," "transparency," "tools and ideas," et al. than if it becomes a reporting of a classroom experience.

Reviewer 2
Another hot topic that seems to be arising quickly with ever changing technology.
I attended design conferences just last year and haven't heard this topic being discussed in a Design-Ed environment. I would be very interested to see how this open source softwares are integrated into the classroom.

Reviewer 3
Very thorough, supports how all claims will be executed and discussed. It is very clear what will take place during this presentation.
I'm sure there are concrete examples of how you use this software in both the presentation and paper, but I would suggest perhaps including sample assignments as well to illustrate how to effectively implement these FLOSS programs into the classroom.
